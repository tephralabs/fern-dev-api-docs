{
  "openapi": "3.0.0",
  "info": {
    "title": "Fern Developer API",
    "version": "0.1.0",
    "description": "Easily integrate on and off-ramps into and out of your token of choice",
    "contact": {
      "name": "Fern Support",
      "email": "support@fernhq.com",
      "url": "https://fernhq.com"
    },
    "license": {
      "name": "Proprietary"
    },
    "termsOfService": "https://fernhq.com/terms"
  },
  "servers": [
    {
      "url": "https://app.fernhq.com",
      "description": "Prod"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "tags": [
    {
      "name": "Bank Accounts",
      "description": "Operations for managing bank accounts"
    },
    {
      "name": "Customers",
      "description": "Operations for managing customers"
    },
    {
      "name": "Quotes",
      "description": "Operations for managing quotes"
    },
    {
      "name": "Transactions",
      "description": "Operations for managing transactions"
    }
  ],
  "externalDocs": {
    "description": "Fern Privacy Policy",
    "url": "https://fernhq.com/privacy"
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "FSK",
        "description": "API key must be provided as a Bearer token. Format: fsk_<base64-encoded-string>"
      }
    },
    "schemas": {},
    "parameters": {}
  },
  "paths": {
    "/api/v0/bankAccounts": {
      "post": {
        "tags": [
          "Bank Accounts"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "customerId": {
                    "type": "string",
                    "description": "Unique identifier of the customer",
                    "example": "03b7030f-6da1-4d76-9352-cdebd82112c8"
                  },
                  "beneficiary": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "minLength": 1,
                        "description": "Full name of the beneficiary",
                        "example": "John Doe"
                      },
                      "address": {
                        "type": "object",
                        "properties": {
                          "addressLine1": {
                            "type": "string",
                            "description": "Primary street address",
                            "example": "123 Main Street"
                          },
                          "addressLine2": {
                            "type": "string",
                            "description": "Secondary address information (apt, suite, etc)",
                            "example": "Suite 100"
                          },
                          "city": {
                            "type": "string",
                            "description": "City name",
                            "example": "San Francisco"
                          },
                          "state": {
                            "type": "string",
                            "pattern": "^[A-Z0-9]{1,3}$",
                            "description": "State/province code (ISO 3166-2)",
                            "example": "CA"
                          },
                          "postalCode": {
                            "type": "string",
                            "description": "Postal/ZIP code",
                            "example": "94105"
                          },
                          "country": {
                            "type": "string",
                            "pattern": "^[A-Z]{2}$",
                            "description": "Two-letter country code (ISO 3166-1 alpha-2)",
                            "example": "US"
                          }
                        },
                        "required": [
                          "addressLine1",
                          "city",
                          "state",
                          "postalCode",
                          "country"
                        ],
                        "description": "Physical address of the beneficiary"
                      },
                      "type": {
                        "type": "string",
                        "enum": [
                          "personal",
                          "business"
                        ],
                        "description": "Type of beneficiary - personal or business entity",
                        "title": "Beneficiary Type",
                        "example": "personal"
                      }
                    },
                    "required": [
                      "name",
                      "address",
                      "type"
                    ],
                    "description": "Details about the bank account beneficiary",
                    "title": "Beneficiary Information"
                  },
                  "bankAccountInformation": {
                    "type": "object",
                    "properties": {
                      "accountNumber": {
                        "type": "string",
                        "minLength": 1,
                        "description": "Bank account number",
                        "example": "000123456789"
                      },
                      "achRoutingNumber": {
                        "type": "string",
                        "maxLength": 20,
                        "description": "ACH routing number for domestic US transfers",
                        "example": "021000021"
                      },
                      "wireRoutingNumber": {
                        "type": "string",
                        "maxLength": 20,
                        "description": "Wire routing number for wire transfers",
                        "example": "021000021"
                      },
                      "accountType": {
                        "type": "string",
                        "enum": [
                          "checking",
                          "savings"
                        ],
                        "description": "The type of bank account",
                        "title": "Account Type"
                      },
                      "bankName": {
                        "type": "string",
                        "minLength": 1,
                        "description": "Name of the bank",
                        "example": "Chase Bank"
                      },
                      "accountName": {
                        "type": "string",
                        "description": "Name on the account (if different from beneficiary)",
                        "example": "John Doe Business Account"
                      }
                    },
                    "required": [
                      "accountNumber",
                      "accountType",
                      "bankName"
                    ],
                    "description": "Banking details including account numbers, routing numbers, and account type",
                    "title": "Bank Account Information"
                  }
                },
                "required": [
                  "customerId",
                  "beneficiary",
                  "bankAccountInformation"
                ],
                "description": "Request payload for creating a new bank account. Requires either ACH or Wire routing number.",
                "title": "Create Bank Account Request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Bank account created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Unique identifier of the bank account",
                      "example": "072a8b7b-38c7-429a-a6cf-35dae7f2fb77"
                    },
                    "accountMask": {
                      "type": "string",
                      "minLength": 4,
                      "maxLength": 4,
                      "description": "Last 4 digits of the account number",
                      "example": "6789"
                    },
                    "bankName": {
                      "type": "string",
                      "description": "Name of the bank",
                      "example": "Chase Bank"
                    },
                    "beneficiary": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [
                            "personal",
                            "business"
                          ],
                          "description": "The type of beneficiary - either personal or business",
                          "title": "Beneficiary Type"
                        },
                        "name": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "type",
                        "name"
                      ],
                      "description": "Basic beneficiary information"
                    },
                    "accountType": {
                      "type": "string",
                      "enum": [
                        "checking",
                        "savings"
                      ],
                      "description": "The type of bank account",
                      "title": "Account Type"
                    }
                  },
                  "required": [
                    "id",
                    "accountMask",
                    "bankName",
                    "beneficiary",
                    "accountType"
                  ],
                  "description": "Response payload containing bank account details",
                  "title": "Bank Account Response"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Invalid currency details"
                    },
                    "code": {
                      "type": "string",
                      "description": "Error code",
                      "example": "BAD REQUEST"
                    },
                    "statusCode": {
                      "type": "number",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "context": {
                      "type": "object",
                      "additionalProperties": {
                        "nullable": true
                      },
                      "description": "Additional context for the error"
                    },
                    "path": {
                      "type": "string",
                      "description": "Path where the error occurred",
                      "example": "/example/path"
                    }
                  },
                  "required": [
                    "message",
                    "code",
                    "statusCode",
                    "context",
                    "path"
                  ]
                },
                "examples": {
                  "bankAccountAlreadyExists": {
                    "summary": "Bank account already exists",
                    "value": {
                      "message": "Bank account already exists",
                      "code": "BAD REQUEST",
                      "statusCode": 400,
                      "context": {
                        "type": "BankAccount"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Invalid currency details"
                    },
                    "code": {
                      "type": "string",
                      "description": "Error code",
                      "example": "BAD REQUEST"
                    },
                    "statusCode": {
                      "type": "number",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "context": {
                      "type": "object",
                      "additionalProperties": {
                        "nullable": true
                      },
                      "description": "Additional context for the error"
                    },
                    "path": {
                      "type": "string",
                      "description": "Path where the error occurred",
                      "example": "/example/path"
                    }
                  },
                  "required": [
                    "message",
                    "code",
                    "statusCode",
                    "context",
                    "path"
                  ]
                },
                "examples": {
                  "customerNotFound": {
                    "summary": "Customer account not found",
                    "value": {
                      "message": "Customer account not found",
                      "code": "NOT FOUND",
                      "statusCode": 400,
                      "context": {
                        "type": "BankAccount"
                      }
                    }
                  },
                  "customerAccountNotLinkedToOrg": {
                    "summary": "Customer account not linked to org",
                    "value": {
                      "message": "Customer account not linked to org",
                      "code": "NOT FOUND",
                      "statusCode": 400,
                      "context": {
                        "type": "BankAccount"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Invalid currency details"
                    },
                    "code": {
                      "type": "string",
                      "description": "Error code",
                      "example": "BAD REQUEST"
                    },
                    "statusCode": {
                      "type": "number",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "context": {
                      "type": "object",
                      "additionalProperties": {
                        "nullable": true
                      },
                      "description": "Additional context for the error"
                    },
                    "path": {
                      "type": "string",
                      "description": "Path where the error occurred",
                      "example": "/example/path"
                    }
                  },
                  "required": [
                    "message",
                    "code",
                    "statusCode",
                    "context",
                    "path"
                  ]
                },
                "examples": {
                  "errorLinkingBankAccount": {
                    "summary": "Error linking bank account",
                    "value": {
                      "message": "Error linking bank account",
                      "code": "INTERNAL ERROR",
                      "statusCode": 500,
                      "context": {
                        "type": "BankAccount"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Bank Accounts"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Page token to fetch entries after",
              "example": "abc"
            },
            "required": false,
            "name": "pageToken",
            "in": "path"
          },
          {
            "schema": {
              "type": "number",
              "minimum": 0,
              "exclusiveMinimum": true,
              "maximum": 100,
              "description": "Number of entries to fetch",
              "example": 10
            },
            "required": false,
            "name": "pageSize",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "description": "Customer to list transaction for",
              "example": "072a8b7b-38c7-429a-a6cf-35dae7f2fb77"
            },
            "required": true,
            "name": "customerId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Bank account details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "bankAccounts": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Unique identifier of the bank account",
                            "example": "072a8b7b-38c7-429a-a6cf-35dae7f2fb77"
                          },
                          "accountMask": {
                            "type": "string",
                            "minLength": 4,
                            "maxLength": 4,
                            "description": "Last 4 digits of the account number",
                            "example": "6789"
                          },
                          "bankName": {
                            "type": "string",
                            "description": "Name of the bank",
                            "example": "Chase Bank"
                          },
                          "beneficiary": {
                            "type": "object",
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "personal",
                                  "business"
                                ],
                                "description": "The type of beneficiary - either personal or business",
                                "title": "Beneficiary Type"
                              },
                              "name": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "type",
                              "name"
                            ],
                            "description": "Basic beneficiary information"
                          },
                          "accountType": {
                            "type": "string",
                            "enum": [
                              "checking",
                              "savings"
                            ],
                            "description": "The type of bank account",
                            "title": "Account Type"
                          }
                        },
                        "required": [
                          "id",
                          "accountMask",
                          "bankName",
                          "beneficiary",
                          "accountType"
                        ],
                        "description": "Response payload containing bank account details",
                        "title": "Bank Account Response"
                      },
                      "description": "Retrieved bank accounts",
                      "title": "Bank Accounts"
                    },
                    "nextPageToken": {
                      "type": "string",
                      "description": "Page token to use to fetch next page",
                      "example": "xyz"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Invalid currency details"
                    },
                    "code": {
                      "type": "string",
                      "description": "Error code",
                      "example": "BAD REQUEST"
                    },
                    "statusCode": {
                      "type": "number",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "context": {
                      "type": "object",
                      "additionalProperties": {
                        "nullable": true
                      },
                      "description": "Additional context for the error"
                    },
                    "path": {
                      "type": "string",
                      "description": "Path where the error occurred",
                      "example": "/example/path"
                    }
                  },
                  "required": [
                    "message",
                    "code",
                    "statusCode",
                    "context",
                    "path"
                  ]
                },
                "examples": {
                  "accountNotLinkedToOrg": {
                    "summary": "Account not linked to org",
                    "value": {
                      "message": "Account not linked to org",
                      "code": "FORBIDDEN",
                      "statusCode": 403,
                      "context": {
                        "type": "Account"
                      },
                      "path": "/account"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v0/bankAccounts/{bankAccountId}": {
      "get": {
        "tags": [
          "Bank Accounts"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Unique identifier of the bank account",
              "example": "072a8b7b-38c7-429a-a6cf-35dae7f2fb77"
            },
            "required": true,
            "name": "bankAccountId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Bank account details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Unique identifier of the bank account",
                      "example": "072a8b7b-38c7-429a-a6cf-35dae7f2fb77"
                    },
                    "accountMask": {
                      "type": "string",
                      "minLength": 4,
                      "maxLength": 4,
                      "description": "Last 4 digits of the account number",
                      "example": "6789"
                    },
                    "bankName": {
                      "type": "string",
                      "description": "Name of the bank",
                      "example": "Chase Bank"
                    },
                    "beneficiary": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [
                            "personal",
                            "business"
                          ],
                          "description": "The type of beneficiary - either personal or business",
                          "title": "Beneficiary Type"
                        },
                        "name": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "type",
                        "name"
                      ],
                      "description": "Basic beneficiary information"
                    },
                    "accountType": {
                      "type": "string",
                      "enum": [
                        "checking",
                        "savings"
                      ],
                      "description": "The type of bank account",
                      "title": "Account Type"
                    }
                  },
                  "required": [
                    "id",
                    "accountMask",
                    "bankName",
                    "beneficiary",
                    "accountType"
                  ],
                  "description": "Response payload containing bank account details",
                  "title": "Bank Account Response"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Invalid currency details"
                    },
                    "code": {
                      "type": "string",
                      "description": "Error code",
                      "example": "BAD REQUEST"
                    },
                    "statusCode": {
                      "type": "number",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "context": {
                      "type": "object",
                      "additionalProperties": {
                        "nullable": true
                      },
                      "description": "Additional context for the error"
                    },
                    "path": {
                      "type": "string",
                      "description": "Path where the error occurred",
                      "example": "/example/path"
                    }
                  },
                  "required": [
                    "message",
                    "code",
                    "statusCode",
                    "context",
                    "path"
                  ]
                },
                "examples": {
                  "bankAccountNotFound": {
                    "summary": "Bank Account ID not found",
                    "value": {
                      "message": "Bank Account ID not found",
                      "code": "NOT FOUND",
                      "statusCode": 404,
                      "context": {
                        "type": "BankAccount"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Bank Accounts"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Unique identifier of the bank account",
              "example": "072a8b7b-38c7-429a-a6cf-35dae7f2fb77"
            },
            "required": true,
            "name": "bankAccountId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "customerId": {
                    "type": "string",
                    "description": "Unique identifier of the customer",
                    "example": "03b7030f-6da1-4d76-9352-cdebd82112c8"
                  },
                  "beneficiary": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "minLength": 1,
                        "description": "Full name of the beneficiary",
                        "example": "John Doe"
                      },
                      "address": {
                        "type": "object",
                        "properties": {
                          "addressLine1": {
                            "type": "string",
                            "description": "Primary street address",
                            "example": "123 Main Street"
                          },
                          "addressLine2": {
                            "type": "string",
                            "description": "Secondary address information (apt, suite, etc)",
                            "example": "Suite 100"
                          },
                          "city": {
                            "type": "string",
                            "description": "City name",
                            "example": "San Francisco"
                          },
                          "state": {
                            "type": "string",
                            "pattern": "^[A-Z0-9]{1,3}$",
                            "description": "State/province code (ISO 3166-2)",
                            "example": "CA"
                          },
                          "postalCode": {
                            "type": "string",
                            "description": "Postal/ZIP code",
                            "example": "94105"
                          },
                          "country": {
                            "type": "string",
                            "pattern": "^[A-Z]{2}$",
                            "description": "Two-letter country code (ISO 3166-1 alpha-2)",
                            "example": "US"
                          }
                        },
                        "required": [
                          "addressLine1",
                          "city",
                          "state",
                          "postalCode",
                          "country"
                        ],
                        "description": "Physical address information with standardized country and state codes",
                        "title": "Address"
                      },
                      "type": {
                        "type": "string",
                        "enum": [
                          "personal",
                          "business"
                        ],
                        "description": "Type of beneficiary - personal or business entity",
                        "title": "Beneficiary Type",
                        "example": "personal"
                      }
                    },
                    "description": "Updated beneficiary information - all fields are optional"
                  },
                  "bankAccountInformation": {
                    "type": "object",
                    "properties": {
                      "accountNumber": {
                        "type": "string"
                      },
                      "achRoutingNumber": {
                        "type": "string",
                        "maxLength": 20,
                        "description": "ACH routing number for domestic US transfers",
                        "example": "021000021"
                      },
                      "wireRoutingNumber": {
                        "type": "string",
                        "maxLength": 20,
                        "description": "Wire routing number for wire transfers",
                        "example": "021000021"
                      },
                      "accountType": {
                        "type": "string",
                        "enum": [
                          "checking",
                          "savings"
                        ],
                        "description": "The type of bank account",
                        "title": "Account Type"
                      },
                      "bankName": {
                        "type": "string"
                      },
                      "accountName": {
                        "type": "string",
                        "description": "Name on the account (if different from beneficiary)",
                        "example": "John Doe Business Account"
                      }
                    },
                    "description": "Updated bank account information - all fields are optional"
                  }
                },
                "required": [
                  "customerId"
                ],
                "description": "Request payload for updating an existing bank account. All fields except customerId are optional.",
                "title": "Update Bank Account Request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Bank account updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Unique identifier of the bank account",
                      "example": "072a8b7b-38c7-429a-a6cf-35dae7f2fb77"
                    },
                    "accountMask": {
                      "type": "string",
                      "minLength": 4,
                      "maxLength": 4,
                      "description": "Last 4 digits of the account number",
                      "example": "6789"
                    },
                    "bankName": {
                      "type": "string",
                      "description": "Name of the bank",
                      "example": "Chase Bank"
                    },
                    "beneficiary": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [
                            "personal",
                            "business"
                          ],
                          "description": "The type of beneficiary - either personal or business",
                          "title": "Beneficiary Type"
                        },
                        "name": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "type",
                        "name"
                      ],
                      "description": "Basic beneficiary information"
                    },
                    "accountType": {
                      "type": "string",
                      "enum": [
                        "checking",
                        "savings"
                      ],
                      "description": "The type of bank account",
                      "title": "Account Type"
                    }
                  },
                  "required": [
                    "id",
                    "accountMask",
                    "bankName",
                    "beneficiary",
                    "accountType"
                  ],
                  "description": "Response payload containing bank account details",
                  "title": "Bank Account Response"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Invalid currency details"
                    },
                    "code": {
                      "type": "string",
                      "description": "Error code",
                      "example": "BAD REQUEST"
                    },
                    "statusCode": {
                      "type": "number",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "context": {
                      "type": "object",
                      "additionalProperties": {
                        "nullable": true
                      },
                      "description": "Additional context for the error"
                    },
                    "path": {
                      "type": "string",
                      "description": "Path where the error occurred",
                      "example": "/example/path"
                    }
                  },
                  "required": [
                    "message",
                    "code",
                    "statusCode",
                    "context",
                    "path"
                  ]
                },
                "examples": {
                  "bankAccountNotFound": {
                    "summary": "Bank Account ID not found",
                    "value": {
                      "message": "Bank Account ID not found",
                      "code": "NOT FOUND",
                      "statusCode": 404,
                      "context": {
                        "type": "BankAccount"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v0/quotes": {
      "post": {
        "tags": [
          "Quotes"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "customerId": {
                    "type": "string",
                    "description": "A unique identifier for the customer initiating the transaction.",
                    "example": "03b7030f-6da1-4d76-9352-cdebd82112c8"
                  },
                  "source": {
                    "type": "object",
                    "properties": {
                      "bankAccountId": {
                        "type": "string",
                        "description": "The bank account ID when sending from a bank account.",
                        "example": "072a8b7b-38c7-429a-a6cf-35dae7f2fb77"
                      },
                      "paymentMethod": {
                        "anyOf": [
                          {
                            "type": "string",
                            "enum": [
                              "ach",
                              "ach_same_day",
                              "wire"
                            ],
                            "description": "The payment method for the source funds (fiat)",
                            "title": "Fiat Payment Method",
                            "example": "ach"
                          },
                          {
                            "type": "string",
                            "enum": [
                              "arbitrum",
                              "base",
                              "ethereum",
                              "optimism",
                              "polygon"
                            ],
                            "description": "The payment method for the source funds (crypto)",
                            "title": "Crypto Payment Method",
                            "example": "ethereum"
                          }
                        ],
                        "description": "The payment method for the source funds (crypto or fiat)"
                      },
                      "currency": {
                        "type": "string",
                        "description": "The currency to send (e.g., USD, ETH, USDC)",
                        "example": "USD"
                      }
                    },
                    "required": [
                      "paymentMethod",
                      "currency"
                    ]
                  },
                  "destination": {
                    "type": "object",
                    "properties": {
                      "bankAccountId": {
                        "type": "string",
                        "description": "The bank account ID when sending to a bank account.",
                        "example": "072a8b7b-38c7-429a-a6cf-35dae7f2fb77"
                      },
                      "walletAddress": {
                        "type": "string",
                        "maxLength": 42,
                        "description": "The wallet address when sending to a crypto wallet.",
                        "example": "0xbf50fb9c99233f95bce213044507e58485cf9eba"
                      },
                      "paymentMethod": {
                        "anyOf": [
                          {
                            "type": "string",
                            "enum": [
                              "ach",
                              "ach_same_day",
                              "wire"
                            ],
                            "description": "The payment method for the source funds (fiat)",
                            "title": "Fiat Payment Method",
                            "example": "ach"
                          },
                          {
                            "type": "string",
                            "enum": [
                              "arbitrum",
                              "base",
                              "ethereum",
                              "optimism",
                              "polygon"
                            ],
                            "description": "The payment method for the source funds (crypto)",
                            "title": "Crypto Payment Method",
                            "example": "ethereum"
                          }
                        ],
                        "description": "The payment method for the source funds (crypto or fiat)"
                      },
                      "currency": {
                        "type": "string",
                        "description": "The currency to receive (e.g., USD, USDC)",
                        "example": "USDC"
                      },
                      "wireMessage": {
                        "type": "string",
                        "maxLength": 140,
                        "description": "Optional message for wire transfers, relayed to destination bank (max 140 characters)"
                      },
                      "achReference": {
                        "type": "string",
                        "maxLength": 80,
                        "description": "Optional reference for ACH transfers, relayed to destination bank (max 80 characters)"
                      }
                    },
                    "required": [
                      "paymentMethod",
                      "currency"
                    ]
                  },
                  "sendingAmount": {
                    "type": "number",
                    "minimum": 0,
                    "description": "The amount to convert and send, expressed in decimals and denominated in the source currency",
                    "example": 100
                  },
                  "developerFee": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "usd_spread"
                        ],
                        "description": "The type of fee"
                      },
                      "amount": {
                        "type": "number",
                        "minimum": 0,
                        "description": "Amount of this fee that was applied",
                        "example": 5.45
                      }
                    },
                    "required": [
                      "type",
                      "amount"
                    ],
                    "description": "Specifies additional fees which the developer can charge on top of fern fees",
                    "title": "Developer Fees"
                  }
                },
                "required": [
                  "customerId",
                  "source",
                  "destination",
                  "sendingAmount"
                ],
                "description": "Get a proposed price for your specified currency route (price guaranteed for 5 mins)",
                "title": "Create a new quote"
              },
              "examples": {
                "example1": {
                  "summary": "Create a quote for an offramp transaction",
                  "value": {
                    "customerId": "03b7030f-6da1-4d76-9352-cdebd82112c8",
                    "sendingAmount": 100,
                    "source": {
                      "paymentMethod": "ethereum",
                      "currency": "USDC"
                    },
                    "destination": {
                      "bankAccountId": "072a8b7b-38c7-429a-a6cf-35dae7f2fb77",
                      "paymentMethod": "wire",
                      "currency": "USD"
                    }
                  }
                },
                "example2": {
                  "summary": "Create a quote for an onramp transaction",
                  "value": {
                    "customerId": "03b7030f-6da1-4d76-9352-cdebd82112c8",
                    "sendingAmount": 100,
                    "source": {
                      "bankAccountId": "072a8b7b-38c7-429a-a6cf-35dae7f2fb77",
                      "paymentMethod": "wire",
                      "currency": "USD"
                    },
                    "destination": {
                      "walletAddress": "0xBF50FB9C99233f95bcE213044507e58485Cf9EBA",
                      "paymentMethod": "ethereum",
                      "currency": "USDC"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Quote created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "quoteId": {
                      "type": "string",
                      "description": "Unique identifier for this quote",
                      "example": "quote_abc123"
                    },
                    "exchangeRate": {
                      "type": "number",
                      "minimum": 0,
                      "exclusiveMinimum": true,
                      "description": "The rate at which the source currency is multiplied to determine the equivalent amount in the destination currency",
                      "example": 1.2
                    },
                    "receivingAmount": {
                      "type": "number",
                      "minimum": 0,
                      "exclusiveMinimum": true,
                      "description": "The amount that will be received after conversion and fees",
                      "example": 100
                    },
                    "minGuaranteedReceivingAmount": {
                      "type": "number",
                      "minimum": 0,
                      "exclusiveMinimum": true,
                      "description": "The minimum amount guaranteed to be received, accounting for potential price fluctuations",
                      "example": 98
                    },
                    "expiresAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "ISO timestamp when this quote expires (5 minutes from creation)"
                    },
                    "fees": {
                      "type": "object",
                      "properties": {
                        "fernFee": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "fern",
                                "developer"
                              ],
                              "description": "The type of fee",
                              "title": "Fee Type"
                            },
                            "currency": {
                              "type": "string",
                              "description": "Currency the fee is denominated in",
                              "example": "USD"
                            },
                            "amount": {
                              "type": "number",
                              "description": "Amount of this fee that was applied",
                              "example": 5.45
                            },
                            "usdAmount": {
                              "type": "number",
                              "description": "Amount of this fee that was applied in USD",
                              "example": 5.45
                            }
                          },
                          "required": [
                            "type",
                            "currency",
                            "amount",
                            "usdAmount"
                          ],
                          "description": "Fee charged by Fern"
                        },
                        "developerFee": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "fern",
                                "developer"
                              ],
                              "description": "The type of fee",
                              "title": "Fee Type"
                            },
                            "currency": {
                              "type": "string",
                              "description": "Currency the fee is denominated in",
                              "example": "USD"
                            },
                            "amount": {
                              "type": "number",
                              "description": "Amount of this fee that was applied",
                              "example": 5.45
                            },
                            "usdAmount": {
                              "type": "number",
                              "description": "Amount of this fee that was applied in USD",
                              "example": 5.45
                            }
                          },
                          "required": [
                            "type",
                            "currency",
                            "amount",
                            "usdAmount"
                          ],
                          "description": "Fee charged by application developer"
                        }
                      },
                      "required": [
                        "fernFee"
                      ],
                      "description": "Detailed breakdown of all fees associated with the transaction",
                      "title": "Transaction Fees"
                    }
                  },
                  "required": [
                    "quoteId",
                    "exchangeRate",
                    "receivingAmount",
                    "minGuaranteedReceivingAmount",
                    "expiresAt",
                    "fees"
                  ],
                  "description": "Response containing quote details including exchange rate, fees, and expiration",
                  "title": "Quote Response"
                },
                "examples": {
                  "example1": {
                    "summary": "Offramp Quote created successfully",
                    "value": {
                      "quoteId": "ec823f56-fc7f-493e-8723-9583a91466a7",
                      "exchangeRate": 1,
                      "receivingAmount": 79.5,
                      "minGuaranteedReceivingAmount": 79.5,
                      "expiresAt": "2024-12-19T00:29:27.355Z",
                      "fees": {
                        "fernFee": {
                          "type": "fern",
                          "currency": "USD",
                          "amount": 20.5,
                          "usdAmount": 20.5
                        },
                        "developerFee": {
                          "type": "developer",
                          "currency": "USD",
                          "amount": 0,
                          "usdAmount": 0
                        }
                      }
                    }
                  },
                  "example2": {
                    "summary": "Onramp Quote created successfully",
                    "value": {
                      "quoteId": "c88ebfc2-3356-48b5-b2bb-6fca7b618c96",
                      "exchangeRate": 1,
                      "receivingAmount": 9.925,
                      "minGuaranteedReceivingAmount": 9.925,
                      "expiresAt": "2024-12-19T01:04:54.783Z",
                      "fees": {
                        "fernFee": {
                          "type": "fern",
                          "currency": "USDC",
                          "amount": 0.075,
                          "usdAmount": 0.08
                        },
                        "developerFee": {
                          "type": "developer",
                          "currency": "USDC",
                          "amount": 0,
                          "usdAmount": 0
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Invalid currency details"
                    },
                    "code": {
                      "type": "string",
                      "description": "Error code",
                      "example": "BAD REQUEST"
                    },
                    "statusCode": {
                      "type": "number",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "context": {
                      "type": "object",
                      "additionalProperties": {
                        "nullable": true
                      },
                      "description": "Additional context for the error"
                    },
                    "path": {
                      "type": "string",
                      "description": "Path where the error occurred",
                      "example": "/example/path"
                    }
                  },
                  "required": [
                    "message",
                    "code",
                    "statusCode",
                    "context",
                    "path"
                  ]
                },
                "examples": {
                  "example1": {
                    "summary": "Invalid currency details",
                    "value": {
                      "message": "Invalid currency details",
                      "code": "BAD REQUEST",
                      "statusCode": 400,
                      "context": {},
                      "path": "/example/path"
                    }
                  },
                  "example2": {
                    "summary": "Sending amount less than 10 USD notional",
                    "value": {
                      "message": "Sending amount less than 10 USD notional",
                      "code": "BAD REQUEST",
                      "statusCode": 400,
                      "context": {},
                      "path": "/example/path"
                    }
                  },
                  "example3": {
                    "summary": "Developer fee type not supported",
                    "value": {
                      "message": "Developer fee type not supported",
                      "code": "BAD REQUEST",
                      "statusCode": 400,
                      "context": {},
                      "path": "/example/path"
                    }
                  },
                  "example4": {
                    "summary": "Unknown transaction type",
                    "value": {
                      "message": "Unknown transaction type: Only fiat-crypto or crypto-fiat transactions are currently supported.",
                      "code": "BAD REQUEST",
                      "statusCode": 400,
                      "context": {},
                      "path": "/example/path"
                    }
                  },
                  "example5": {
                    "summary": "Customer does not have a source wallet.",
                    "value": {
                      "message": "Customer does not have a source wallet.",
                      "code": "BAD REQUEST",
                      "statusCode": 400,
                      "context": {},
                      "path": "/example/path"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Invalid currency details"
                    },
                    "code": {
                      "type": "string",
                      "description": "Error code",
                      "example": "BAD REQUEST"
                    },
                    "statusCode": {
                      "type": "number",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "context": {
                      "type": "object",
                      "additionalProperties": {
                        "nullable": true
                      },
                      "description": "Additional context for the error"
                    },
                    "path": {
                      "type": "string",
                      "description": "Path where the error occurred",
                      "example": "/example/path"
                    }
                  },
                  "required": [
                    "message",
                    "code",
                    "statusCode",
                    "context",
                    "path"
                  ]
                },
                "examples": {
                  "example1": {
                    "summary": "Customer is not authorized to perform this transaction",
                    "value": {
                      "message": "Customer is not authorized to perform this transaction",
                      "code": "FORBIDDEN",
                      "statusCode": 403,
                      "context": {},
                      "path": "/example/path"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Invalid currency details"
                    },
                    "code": {
                      "type": "string",
                      "description": "Error code",
                      "example": "BAD REQUEST"
                    },
                    "statusCode": {
                      "type": "number",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "context": {
                      "type": "object",
                      "additionalProperties": {
                        "nullable": true
                      },
                      "description": "Additional context for the error"
                    },
                    "path": {
                      "type": "string",
                      "description": "Path where the error occurred",
                      "example": "/example/path"
                    }
                  },
                  "required": [
                    "message",
                    "code",
                    "statusCode",
                    "context",
                    "path"
                  ]
                },
                "examples": {
                  "example1": {
                    "summary": "Bank Account ID not found.",
                    "value": {
                      "message": "Bank Account ID not found.",
                      "code": "NOT FOUND",
                      "statusCode": 404,
                      "context": {},
                      "path": "/example/path"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Invalid currency details"
                    },
                    "code": {
                      "type": "string",
                      "description": "Error code",
                      "example": "BAD REQUEST"
                    },
                    "statusCode": {
                      "type": "number",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "context": {
                      "type": "object",
                      "additionalProperties": {
                        "nullable": true
                      },
                      "description": "Additional context for the error"
                    },
                    "path": {
                      "type": "string",
                      "description": "Path where the error occurred",
                      "example": "/example/path"
                    }
                  },
                  "required": [
                    "message",
                    "code",
                    "statusCode",
                    "context",
                    "path"
                  ]
                },
                "examples": {
                  "example1": {
                    "summary": "Error estimating conversion",
                    "value": {
                      "message": "Error estimating conversion: Conversion is not supported for the selected currency pair",
                      "code": "INTERNAL ERROR",
                      "statusCode": 500,
                      "context": {},
                      "path": "/example/path"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v0/quotes/{quoteId}": {
      "get": {
        "tags": [
          "Quotes"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "The unique identifier for the quote to retrieve",
              "example": "c88ebfc2-3356-48b5-b2bb-6fca7b618c96"
            },
            "required": true,
            "name": "quoteId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Quote details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "quoteId": {
                      "type": "string",
                      "description": "Unique identifier for this quote",
                      "example": "quote_abc123"
                    },
                    "exchangeRate": {
                      "type": "number",
                      "minimum": 0,
                      "exclusiveMinimum": true,
                      "description": "The rate at which the source currency is multiplied to determine the equivalent amount in the destination currency",
                      "example": 1.2
                    },
                    "receivingAmount": {
                      "type": "number",
                      "minimum": 0,
                      "exclusiveMinimum": true,
                      "description": "The amount that will be received after conversion and fees",
                      "example": 100
                    },
                    "minGuaranteedReceivingAmount": {
                      "type": "number",
                      "minimum": 0,
                      "exclusiveMinimum": true,
                      "description": "The minimum amount guaranteed to be received, accounting for potential price fluctuations",
                      "example": 98
                    },
                    "expiresAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "ISO timestamp when this quote expires (5 minutes from creation)"
                    },
                    "fees": {
                      "type": "object",
                      "properties": {
                        "fernFee": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "fern",
                                "developer"
                              ],
                              "description": "The type of fee",
                              "title": "Fee Type"
                            },
                            "currency": {
                              "type": "string",
                              "description": "Currency the fee is denominated in",
                              "example": "USD"
                            },
                            "amount": {
                              "type": "number",
                              "description": "Amount of this fee that was applied",
                              "example": 5.45
                            },
                            "usdAmount": {
                              "type": "number",
                              "description": "Amount of this fee that was applied in USD",
                              "example": 5.45
                            }
                          },
                          "required": [
                            "type",
                            "currency",
                            "amount",
                            "usdAmount"
                          ],
                          "description": "Fee charged by Fern"
                        },
                        "developerFee": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "fern",
                                "developer"
                              ],
                              "description": "The type of fee",
                              "title": "Fee Type"
                            },
                            "currency": {
                              "type": "string",
                              "description": "Currency the fee is denominated in",
                              "example": "USD"
                            },
                            "amount": {
                              "type": "number",
                              "description": "Amount of this fee that was applied",
                              "example": 5.45
                            },
                            "usdAmount": {
                              "type": "number",
                              "description": "Amount of this fee that was applied in USD",
                              "example": 5.45
                            }
                          },
                          "required": [
                            "type",
                            "currency",
                            "amount",
                            "usdAmount"
                          ],
                          "description": "Fee charged by application developer"
                        }
                      },
                      "required": [
                        "fernFee"
                      ],
                      "description": "Detailed breakdown of all fees associated with the transaction",
                      "title": "Transaction Fees"
                    }
                  },
                  "required": [
                    "quoteId",
                    "exchangeRate",
                    "receivingAmount",
                    "minGuaranteedReceivingAmount",
                    "expiresAt",
                    "fees"
                  ],
                  "description": "Response containing quote details including exchange rate, fees, and expiration",
                  "title": "Quote Response"
                },
                "examples": {
                  "example1": {
                    "summary": "Offramp Quote created successfully",
                    "value": {
                      "quoteId": "ec823f56-fc7f-493e-8723-9583a91466a7",
                      "exchangeRate": 1,
                      "receivingAmount": 79.5,
                      "minGuaranteedReceivingAmount": 79.5,
                      "expiresAt": "2024-12-19T00:29:27.355Z",
                      "fees": {
                        "fernFee": {
                          "type": "fern",
                          "currency": "USD",
                          "amount": 20.5,
                          "usdAmount": 20.5
                        },
                        "developerFee": {
                          "type": "developer",
                          "currency": "USD",
                          "amount": 0,
                          "usdAmount": 0
                        }
                      }
                    }
                  },
                  "example2": {
                    "summary": "Onramp Quote created successfully",
                    "value": {
                      "quoteId": "c88ebfc2-3356-48b5-b2bb-6fca7b618c96",
                      "exchangeRate": 1,
                      "receivingAmount": 9.925,
                      "minGuaranteedReceivingAmount": 9.925,
                      "expiresAt": "2024-12-19T01:04:54.783Z",
                      "fees": {
                        "fernFee": {
                          "type": "fern",
                          "currency": "USDC",
                          "amount": 0.075,
                          "usdAmount": 0.08
                        },
                        "developerFee": {
                          "type": "developer",
                          "currency": "USDC",
                          "amount": 0,
                          "usdAmount": 0
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Invalid currency details"
                    },
                    "code": {
                      "type": "string",
                      "description": "Error code",
                      "example": "BAD REQUEST"
                    },
                    "statusCode": {
                      "type": "number",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "context": {
                      "type": "object",
                      "additionalProperties": {
                        "nullable": true
                      },
                      "description": "Additional context for the error"
                    },
                    "path": {
                      "type": "string",
                      "description": "Path where the error occurred",
                      "example": "/example/path"
                    }
                  },
                  "required": [
                    "message",
                    "code",
                    "statusCode",
                    "context",
                    "path"
                  ]
                },
                "examples": {
                  "quoteMissingDetails": {
                    "summary": "Quote must include QuoteDetails",
                    "value": {
                      "message": "Quote must include QuoteDetails.",
                      "code": "BAD REQUEST",
                      "statusCode": 400,
                      "context": {
                        "type": "Quote"
                      },
                      "path": "/quote"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Invalid currency details"
                    },
                    "code": {
                      "type": "string",
                      "description": "Error code",
                      "example": "BAD REQUEST"
                    },
                    "statusCode": {
                      "type": "number",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "context": {
                      "type": "object",
                      "additionalProperties": {
                        "nullable": true
                      },
                      "description": "Additional context for the error"
                    },
                    "path": {
                      "type": "string",
                      "description": "Path where the error occurred",
                      "example": "/example/path"
                    }
                  },
                  "required": [
                    "message",
                    "code",
                    "statusCode",
                    "context",
                    "path"
                  ]
                },
                "examples": {
                  "quoteNotFound": {
                    "summary": "Quote not found",
                    "value": {
                      "message": "Quote not found.",
                      "code": "NOT FOUND",
                      "statusCode": 404,
                      "context": {
                        "type": "Quote"
                      },
                      "path": "/quote"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Invalid currency details"
                    },
                    "code": {
                      "type": "string",
                      "description": "Error code",
                      "example": "BAD REQUEST"
                    },
                    "statusCode": {
                      "type": "number",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "context": {
                      "type": "object",
                      "additionalProperties": {
                        "nullable": true
                      },
                      "description": "Additional context for the error"
                    },
                    "path": {
                      "type": "string",
                      "description": "Path where the error occurred",
                      "example": "/example/path"
                    }
                  },
                  "required": [
                    "message",
                    "code",
                    "statusCode",
                    "context",
                    "path"
                  ]
                },
                "examples": {
                  "failedToRetrieveQuote": {
                    "summary": "Failed to retrieve the Quote",
                    "value": {
                      "message": "Failed to retrieve the Quote.",
                      "code": "INTERNAL ERROR",
                      "statusCode": 500,
                      "context": {
                        "type": "Quote"
                      },
                      "path": "/quote"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v0/customers": {
      "post": {
        "tags": [
          "KYB/C"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "individual",
                      "business"
                    ],
                    "description": "The type of customer - either individual or business",
                    "title": "Customer Type"
                  },
                  "firstName": {
                    "type": "string",
                    "description": "First name of the individual customer",
                    "example": "John"
                  },
                  "lastName": {
                    "type": "string",
                    "description": "Last name of the individual customer",
                    "example": "Doe"
                  },
                  "businessName": {
                    "type": "string",
                    "description": "Name of the business for business customers",
                    "example": "Acme Corp"
                  },
                  "email": {
                    "type": "string",
                    "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
                    "description": "Valid email address for the customer",
                    "example": "john.doe@example.com"
                  }
                },
                "required": [
                  "type",
                  "email"
                ],
                "description": "Request payload for creating a new customer account",
                "title": "Create Customer Request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Customer created successfully with KYC link",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "kycLink": {
                      "type": "string",
                      "description": "URL for KYC verification process",
                      "example": "https://kyb.example.com/verify/abc123"
                    },
                    "customerId": {
                      "type": "string",
                      "description": "Unique identifier for the created customer",
                      "example": "03b7030f-6da1-4d76-9352-cdebd82112c8"
                    },
                    "customerStatus": {
                      "type": "string",
                      "enum": [
                        "created",
                        "pending",
                        "active",
                        "rejected",
                        "deactivated"
                      ],
                      "description": "Current status of the customer account",
                      "title": "Customer Status",
                      "example": "pending"
                    }
                  },
                  "required": [
                    "kycLink",
                    "customerId",
                    "customerStatus"
                  ],
                  "description": "Response payload after successfully creating a customer",
                  "title": "Create Customer Response"
                }
              }
            }
          },
          "400": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Invalid currency details"
                    },
                    "code": {
                      "type": "string",
                      "description": "Error code",
                      "example": "BAD REQUEST"
                    },
                    "statusCode": {
                      "type": "number",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "context": {
                      "type": "object",
                      "additionalProperties": {
                        "nullable": true
                      },
                      "description": "Additional context for the error"
                    },
                    "path": {
                      "type": "string",
                      "description": "Path where the error occurred",
                      "example": "/example/path"
                    }
                  },
                  "required": [
                    "message",
                    "code",
                    "statusCode",
                    "context",
                    "path"
                  ]
                },
                "examples": {
                  "invalidProfileType": {
                    "summary": "Validation Error - Invalid profile type",
                    "value": {
                      "message": "Invalid profile type",
                      "code": "VALIDATION_ERROR",
                      "statusCode": 400,
                      "context": {
                        "type": "Validation"
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Invalid currency details"
                    },
                    "code": {
                      "type": "string",
                      "description": "Error code",
                      "example": "BAD REQUEST"
                    },
                    "statusCode": {
                      "type": "number",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "context": {
                      "type": "object",
                      "additionalProperties": {
                        "nullable": true
                      },
                      "description": "Additional context for the error"
                    },
                    "path": {
                      "type": "string",
                      "description": "Path where the error occurred",
                      "example": "/example/path"
                    }
                  },
                  "required": [
                    "message",
                    "code",
                    "statusCode",
                    "context",
                    "path"
                  ]
                },
                "examples": {
                  "accountNotLinkedToOrg": {
                    "summary": "Forbidden - Account not linked to org",
                    "value": {
                      "message": "Account not linked to org",
                      "code": "FORBIDDEN",
                      "statusCode": 403,
                      "context": {
                        "type": "Account"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Invalid currency details"
                    },
                    "code": {
                      "type": "string",
                      "description": "Error code",
                      "example": "BAD REQUEST"
                    },
                    "statusCode": {
                      "type": "number",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "context": {
                      "type": "object",
                      "additionalProperties": {
                        "nullable": true
                      },
                      "description": "Additional context for the error"
                    },
                    "path": {
                      "type": "string",
                      "description": "Path where the error occurred",
                      "example": "/example/path"
                    }
                  },
                  "required": [
                    "message",
                    "code",
                    "statusCode",
                    "context",
                    "path"
                  ]
                },
                "examples": {
                  "accountNotFound": {
                    "summary": "Not Found - Account not found",
                    "value": {
                      "message": "Account not found",
                      "code": "NOT FOUND",
                      "statusCode": 404,
                      "context": {
                        "type": "Account"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Customers"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Page token to fetch entries after",
              "example": "abc"
            },
            "required": false,
            "name": "pageToken",
            "in": "path"
          },
          {
            "schema": {
              "type": "number",
              "minimum": 0,
              "exclusiveMinimum": true,
              "maximum": 100,
              "description": "Number of entries to fetch",
              "example": 10
            },
            "required": false,
            "name": "pageSize",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Customers retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "customers": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "kycLink": {
                            "type": "string",
                            "description": "URL for KYC verification process",
                            "example": "https://kyb.example.com/verify/abc123"
                          },
                          "customerId": {
                            "type": "string",
                            "description": "Unique identifier for the created customer",
                            "example": "03b7030f-6da1-4d76-9352-cdebd82112c8"
                          },
                          "customerStatus": {
                            "type": "string",
                            "enum": [
                              "created",
                              "pending",
                              "active",
                              "rejected",
                              "deactivated"
                            ],
                            "description": "Current status of the customer account",
                            "title": "Customer Status",
                            "example": "pending"
                          }
                        },
                        "required": [
                          "kycLink",
                          "customerId",
                          "customerStatus"
                        ],
                        "description": "Response payload after successfully creating a customer",
                        "title": "Create Customer Response"
                      },
                      "description": "Retrieved customers"
                    },
                    "nextPageToken": {
                      "type": "string",
                      "description": "Page token to use to fetch next page",
                      "example": "xyz"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v0/customers/{customerId}": {
      "get": {
        "tags": [
          "KYB/C"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Unique identifier of the customer",
              "example": "03b7030f-6da1-4d76-9352-cdebd82112c8"
            },
            "required": true,
            "name": "customerId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Customer details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "individual",
                        "business"
                      ],
                      "description": "The type of customer - either individual or business",
                      "title": "Customer Type"
                    },
                    "firstName": {
                      "type": "string",
                      "description": "First name of the individual customer",
                      "example": "John"
                    },
                    "lastName": {
                      "type": "string",
                      "description": "Last name of the individual customer",
                      "example": "Doe"
                    },
                    "businessName": {
                      "type": "string",
                      "description": "Name of the business for business customers",
                      "example": "Acme Corp"
                    }
                  },
                  "required": [
                    "type"
                  ],
                  "description": "Customer profile with type-specific required field validation",
                  "title": "Validated Customer Profile"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Invalid currency details"
                    },
                    "code": {
                      "type": "string",
                      "description": "Error code",
                      "example": "BAD REQUEST"
                    },
                    "statusCode": {
                      "type": "number",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "context": {
                      "type": "object",
                      "additionalProperties": {
                        "nullable": true
                      },
                      "description": "Additional context for the error"
                    },
                    "path": {
                      "type": "string",
                      "description": "Path where the error occurred",
                      "example": "/example/path"
                    }
                  },
                  "required": [
                    "message",
                    "code",
                    "statusCode",
                    "context",
                    "path"
                  ]
                },
                "examples": {
                  "accountNotLinkedToOrg": {
                    "summary": "Account not linked to org",
                    "value": {
                      "message": "Account not linked to org",
                      "code": "FORBIDDEN",
                      "statusCode": 403,
                      "context": {
                        "type": "Account"
                      },
                      "path": "/account"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Invalid currency details"
                    },
                    "code": {
                      "type": "string",
                      "description": "Error code",
                      "example": "BAD REQUEST"
                    },
                    "statusCode": {
                      "type": "number",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "context": {
                      "type": "object",
                      "additionalProperties": {
                        "nullable": true
                      },
                      "description": "Additional context for the error"
                    },
                    "path": {
                      "type": "string",
                      "description": "Path where the error occurred",
                      "example": "/example/path"
                    }
                  },
                  "required": [
                    "message",
                    "code",
                    "statusCode",
                    "context",
                    "path"
                  ]
                },
                "examples": {
                  "accountNotFound": {
                    "summary": "Account not found",
                    "value": {
                      "message": "Account not found",
                      "code": "NOT FOUND",
                      "statusCode": 404,
                      "context": {
                        "type": "Account"
                      },
                      "path": "/account"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v0/transactions": {
      "post": {
        "tags": [
          "Transactions"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "quoteId": {
                    "type": "string",
                    "description": "Identifier of the quote to initiate the transaction",
                    "example": "c88ebfc2-3356-48b5-b2bb-6fca7b618c96"
                  },
                  "correlationId": {
                    "type": "string",
                    "nullable": true,
                    "description": "Optional: You can add your own correlationId to match the transaction to your own internal records.",
                    "example": "03b7030f-6da1-4e76-3352-3debd82112c8"
                  }
                },
                "required": [
                  "quoteId"
                ],
                "description": "Schema for creating a new transaction",
                "title": "Create Transaction Schema"
              },
              "example": {
                "customerId": "03b7030f-6da1-4d76-9352-cdebd82112c8",
                "quoteId": "c88ebfc2-3356-48b5-b2bb-6fca7b618c96"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Transaction created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "transactionId": {
                      "type": "string",
                      "description": "Unique identifier of the transaction",
                      "example": "1d8beb26-b4d1-47ee-8e5d-0d3905f200c7"
                    },
                    "correlationId": {
                      "type": "string",
                      "description": "Optional: You can add your own correlationId to match the transaction to your own internal records.",
                      "example": "03b7030f-6da1-4e76-3352-3debd82112c8"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "AWAITING_TRANSFER",
                        "PROCESSING",
                        "COMPLETED",
                        "FAILED",
                        "CANCELLED"
                      ],
                      "description": "Current status of the transaction",
                      "title": "Transaction State",
                      "example": "PROCESSING"
                    },
                    "fees": {
                      "type": "object",
                      "properties": {
                        "fernFee": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "fern",
                                "developer"
                              ],
                              "description": "The type of fee",
                              "title": "Fee Type"
                            },
                            "currency": {
                              "type": "string",
                              "description": "Currency the fee is denominated in",
                              "example": "USD"
                            },
                            "amount": {
                              "type": "number",
                              "description": "Amount of this fee that was applied",
                              "example": 5.45
                            },
                            "usdAmount": {
                              "type": "number",
                              "description": "Amount of this fee that was applied in USD",
                              "example": 5.45
                            }
                          },
                          "required": [
                            "type",
                            "currency",
                            "amount",
                            "usdAmount"
                          ],
                          "description": "Fee charged by Fern"
                        },
                        "developerFee": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "fern",
                                "developer"
                              ],
                              "description": "The type of fee",
                              "title": "Fee Type"
                            },
                            "currency": {
                              "type": "string",
                              "description": "Currency the fee is denominated in",
                              "example": "USD"
                            },
                            "amount": {
                              "type": "number",
                              "description": "Amount of this fee that was applied",
                              "example": 5.45
                            },
                            "usdAmount": {
                              "type": "number",
                              "description": "Amount of this fee that was applied in USD",
                              "example": 5.45
                            }
                          },
                          "required": [
                            "type",
                            "currency",
                            "amount",
                            "usdAmount"
                          ],
                          "description": "Fee charged by application developer"
                        }
                      },
                      "required": [
                        "fernFee"
                      ],
                      "description": "Detailed breakdown of all fees associated with the transaction",
                      "title": "Transaction Fees"
                    },
                    "exchangeRate": {
                      "type": "number",
                      "description": "The rate at which the source currency is multiplied to determine the equivalent amount in the destination currency",
                      "example": 1.2
                    },
                    "transferInstructions": {
                      "oneOf": [
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "offramp"
                              ],
                              "example": "offramp"
                            },
                            "paymentMethod": {
                              "type": "string",
                              "enum": [
                                "arbitrum",
                                "base",
                                "ethereum",
                                "optimism",
                                "polygon"
                              ],
                              "description": "The chain to deposit funds on",
                              "title": "Crypto Payment Method",
                              "example": "ethereum"
                            },
                            "transferWalletAddress": {
                              "type": "string",
                              "pattern": "^0x[a-fA-F0-9]{40}$",
                              "description": "Details of the sending currency",
                              "example": "0x123abc123abc123abc123abc123abc123abc123a"
                            }
                          },
                          "required": [
                            "type",
                            "paymentMethod",
                            "transferWalletAddress"
                          ],
                          "description": "Instructions for the customer to initiate the offramp",
                          "title": "Transfer Instructions"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "onramp"
                              ]
                            },
                            "paymentMethod": {
                              "type": "string",
                              "enum": [
                                "ach",
                                "ach_same_day",
                                "wire"
                              ],
                              "description": "The fiat payment Method used for the transaction",
                              "title": "Fiat Payment Method"
                            },
                            "transferMessage": {
                              "type": "string",
                              "description": "Message or memo that the customer must include with the deposit",
                              "example": "Payment for order #12345"
                            },
                            "transferBankName": {
                              "type": "string",
                              "description": "Name of the bank for deposit",
                              "example": "First National Bank"
                            },
                            "transferBankAddress": {
                              "type": "string",
                              "description": "Address of the bank",
                              "example": "123 Bank St, Finance City"
                            },
                            "transferBankRoutingNumber": {
                              "type": "string",
                              "description": "Routing number of the bank",
                              "example": "123456789"
                            },
                            "transferBankAccountNumber": {
                              "type": "string",
                              "description": "Bank account number for deposit",
                              "example": "987654321"
                            },
                            "transferBankBeneficiaryName": {
                              "type": "string",
                              "description": "Beneficiary name associated with the bank account",
                              "example": "John Doe"
                            }
                          },
                          "required": [
                            "type",
                            "paymentMethod",
                            "transferMessage",
                            "transferBankName",
                            "transferBankAddress",
                            "transferBankRoutingNumber",
                            "transferBankAccountNumber",
                            "transferBankBeneficiaryName"
                          ],
                          "description": "Instructions for the customer to initiate the onramp",
                          "title": "Onramp Transfer Instructions"
                        }
                      ],
                      "description": "Transfer instructions for either onramp or offramp transactions",
                      "title": "Transfer Instructions"
                    },
                    "source": {
                      "type": "object",
                      "properties": {
                        "bankAccountId": {
                          "type": "string",
                          "description": "The bank account ID when sending from a bank account.",
                          "example": "072a8b7b-38c7-429a-a6cf-35dae7f2fb77"
                        },
                        "paymentMethod": {
                          "anyOf": [
                            {
                              "type": "string",
                              "enum": [
                                "ach",
                                "ach_same_day",
                                "wire"
                              ],
                              "description": "The payment method for the source funds (fiat)",
                              "title": "Fiat Payment Method",
                              "example": "ach"
                            },
                            {
                              "type": "string",
                              "enum": [
                                "arbitrum",
                                "base",
                                "ethereum",
                                "optimism",
                                "polygon"
                              ],
                              "description": "The payment method for the source funds (crypto)",
                              "title": "Crypto Payment Method",
                              "example": "ethereum"
                            }
                          ],
                          "description": "The payment method for the source funds (crypto or fiat)"
                        },
                        "currency": {
                          "type": "string",
                          "description": "The currency to send (e.g., USD, ETH, USDC)",
                          "example": "USD"
                        }
                      },
                      "required": [
                        "paymentMethod",
                        "currency"
                      ]
                    },
                    "destination": {
                      "type": "object",
                      "properties": {
                        "bankAccountId": {
                          "type": "string",
                          "description": "The bank account ID when sending to a bank account.",
                          "example": "072a8b7b-38c7-429a-a6cf-35dae7f2fb77"
                        },
                        "walletAddress": {
                          "type": "string",
                          "maxLength": 42,
                          "description": "The wallet address when sending to a crypto wallet.",
                          "example": "0xbf50fb9c99233f95bce213044507e58485cf9eba"
                        },
                        "paymentMethod": {
                          "anyOf": [
                            {
                              "type": "string",
                              "enum": [
                                "ach",
                                "ach_same_day",
                                "wire"
                              ],
                              "description": "The payment method for the source funds (fiat)",
                              "title": "Fiat Payment Method",
                              "example": "ach"
                            },
                            {
                              "type": "string",
                              "enum": [
                                "arbitrum",
                                "base",
                                "ethereum",
                                "optimism",
                                "polygon"
                              ],
                              "description": "The payment method for the source funds (crypto)",
                              "title": "Crypto Payment Method",
                              "example": "ethereum"
                            }
                          ],
                          "description": "The payment method for the source funds (crypto or fiat)"
                        },
                        "currency": {
                          "type": "string",
                          "description": "The currency to receive (e.g., USD, USDC)",
                          "example": "USDC"
                        },
                        "wireMessage": {
                          "type": "string",
                          "maxLength": 140,
                          "description": "Optional message for wire transfers, relayed to destination bank (max 140 characters)"
                        },
                        "achReference": {
                          "type": "string",
                          "maxLength": 80,
                          "description": "Optional reference for ACH transfers, relayed to destination bank (max 80 characters)"
                        }
                      },
                      "required": [
                        "paymentMethod",
                        "currency"
                      ]
                    },
                    "sendingAmount": {
                      "type": "number",
                      "minimum": 0,
                      "description": "The amount to convert and send, expressed in decimals and denominated in the source currency",
                      "example": 100
                    },
                    "receivingAmount": {
                      "type": "number",
                      "minimum": 0,
                      "exclusiveMinimum": true,
                      "description": "The amount that will be received after conversion and fees",
                      "example": 98.5
                    },
                    "minGuaranteedReceivingAmount": {
                      "type": "number",
                      "minimum": 0,
                      "exclusiveMinimum": true,
                      "description": "The minimum amount guaranteed to be received, accounting for potential price fluctuations",
                      "example": 98
                    },
                    "errorDetails": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "description": "Error message if the transaction has failed",
                            "example": "Insufficient funds"
                          },
                          "code": {
                            "type": "string",
                            "description": "Error code if the transaction has failed",
                            "example": "INSUFFICIENT_FUNDS"
                          },
                          "metadata": {
                            "type": "object",
                            "nullable": true,
                            "additionalProperties": {
                              "type": "string"
                            },
                            "description": "Additional error metadata",
                            "example": {
                              "errorType": "Funds Error"
                            }
                          },
                          "timestamp": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Timestamp of the error",
                            "example": "2021-08-10T14:48:00Z"
                          },
                          "action": {
                            "type": "string",
                            "nullable": true,
                            "description": "Action to take to resolve the error",
                            "example": "Add more funds"
                          }
                        },
                        "required": [
                          "message"
                        ]
                      },
                      "description": "Details of the error if the transaction has failed"
                    }
                  },
                  "required": [
                    "transactionId",
                    "status",
                    "fees",
                    "exchangeRate",
                    "transferInstructions",
                    "source",
                    "destination",
                    "sendingAmount",
                    "receivingAmount",
                    "minGuaranteedReceivingAmount",
                    "errorDetails"
                  ],
                  "description": "Response schema for a transaction creation request",
                  "title": "Create Transaction Response Schema"
                },
                "examples": {
                  "offrampTransactionSuccess": {
                    "summary": "Offramp transaction response",
                    "value": {
                      "quoteId": "c88ebfc2-3356-48b5-b2bb-6fca7b618c96",
                      "transactionId": "1d8beb26-b4d1-47ee-8e5d-0d3905f200c7",
                      "status": "PROCESSING",
                      "fees": {
                        "fernFee": {
                          "type": "fern",
                          "currency": "USD",
                          "amount": 20.5,
                          "usdAmount": 20.5
                        },
                        "developerFee": {
                          "type": "developer",
                          "currency": "USD",
                          "amount": 0,
                          "usdAmount": 0
                        }
                      },
                      "exchangeRate": 1,
                      "transferInstructions": {
                        "type": "offramp",
                        "paymentMethod": "ethereum",
                        "transferWalletAddress": "0xBF50FB9C99233f95bcE213044507e58485Cf9EBA"
                      },
                      "source": {
                        "paymentMethod": "ethereum",
                        "currency": "USDC"
                      },
                      "destination": {
                        "bankAccountId": "072a8b7b-38c7-429a-a6cf-35dae7f2fb77",
                        "paymentMethod": "wire",
                        "currency": "USD"
                      },
                      "sendingAmount": 100,
                      "receivingAmount": 79.5,
                      "minGuaranteedReceivingAmount": 79.5
                    }
                  },
                  "onrampTransactionSuccess": {
                    "summary": "Onramp transaction response",
                    "value": {
                      "quoteId": "072a8b7b-3356-48b5-b2bb-6fca7b618c96",
                      "transactionId": "908c4092-3a5e-44c8-ac4e-ad47993f00e9",
                      "status": "AWAITING_TRANSFER",
                      "fees": {
                        "fernFee": {
                          "type": "fern",
                          "currency": "USDC",
                          "amount": 0.75,
                          "usdAmount": 0.75
                        },
                        "developerFee": {
                          "type": "developer",
                          "currency": "USDC",
                          "amount": 0,
                          "usdAmount": 0
                        }
                      },
                      "exchangeRate": 1,
                      "transferInstructions": {
                        "type": "onramp",
                        "paymentMethod": "wire",
                        "transferMessage": "test onramp",
                        "transferBankName": "Chase",
                        "transferBankAddress": "10 Downing Steet",
                        "transferBankRoutingNumber": "1234",
                        "transferBankAccountNumber": "10029000",
                        "transferBankBeneficiaryName": "Fern Money"
                      },
                      "source": {
                        "bankAccountId": "072a8b7b-38c7-429a-a6cf-35dae7f2fb77",
                        "paymentMethod": "wire",
                        "currency": "USD"
                      },
                      "destination": {
                        "walletAddress": "0xBF50FB9C99233f95bcE213044507e58485Cf9EBA",
                        "paymentMethod": "ethereum",
                        "currency": "USDC"
                      },
                      "sendingAmount": 100,
                      "receivingAmount": 79.5,
                      "minGuaranteedReceivingAmount": 79.5
                    }
                  },
                  "offrampTransactionFailed": {
                    "summary": "Offramp transaction failed",
                    "value": {
                      "quoteId": "5a95141b-1835-452c-9619-34a3a3ec8ae4",
                      "transactionId": "bf20e97d-d262-4312-bf75-c00a5ed38000",
                      "status": "FAILED",
                      "fees": {
                        "fernFee": {
                          "type": "fern",
                          "currency": "USD",
                          "amount": 20.5,
                          "usdAmount": 20.5
                        },
                        "developerFee": {
                          "type": "developer",
                          "currency": "USD",
                          "amount": 0,
                          "usdAmount": 0
                        }
                      },
                      "exchangeRate": 1,
                      "transferInstructions": {
                        "type": "offramp",
                        "paymentMethod": "sepolia",
                        "transferWalletAddress": "0xBF50FB9C99233f95bcE213044507e58485Cf9EBA"
                      },
                      "source": {
                        "paymentMethod": "ethereum",
                        "currency": "USDC"
                      },
                      "destination": {
                        "bankAccountId": "072a8b7b-38c7-429a-a6cf-35dae7f2fb77",
                        "paymentMethod": "wire",
                        "currency": "USD"
                      },
                      "sendingAmount": 100,
                      "receivingAmount": 79.5,
                      "minGuaranteedReceivingAmount": 79.5,
                      "errorDetails": [
                        {
                          "message": "Insufficient USDC balance in sending wallet",
                          "code": "INSUFFICIENT_BALANCE",
                          "metadata": {
                            "type": "offramp",
                            "wallet": "0xBF50FB9C99233f95bcE213044507e58485Cf9EBA"
                          },
                          "timestamp": "2025-01-03T20:55:54.077Z",
                          "action": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Invalid currency details"
                    },
                    "code": {
                      "type": "string",
                      "description": "Error code",
                      "example": "BAD REQUEST"
                    },
                    "statusCode": {
                      "type": "number",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "context": {
                      "type": "object",
                      "additionalProperties": {
                        "nullable": true
                      },
                      "description": "Additional context for the error"
                    },
                    "path": {
                      "type": "string",
                      "description": "Path where the error occurred",
                      "example": "/example/path"
                    }
                  },
                  "required": [
                    "message",
                    "code",
                    "statusCode",
                    "context",
                    "path"
                  ]
                },
                "examples": {
                  "transactionQuoteNotFound": {
                    "summary": "Transaction - Quote not found",
                    "value": {
                      "message": "Quote not found",
                      "code": "BAD REQUEST",
                      "statusCode": 400,
                      "context": {
                        "type": "Transaction"
                      }
                    }
                  },
                  "transactionInvalidQuote": {
                    "summary": "Transaction - Invalid quote",
                    "value": {
                      "message": "Invalid quote",
                      "code": "BAD REQUEST",
                      "statusCode": 400,
                      "context": {
                        "type": "Transaction"
                      }
                    }
                  },
                  "transactionReceivingAmount": {
                    "summary": "Transaction - Receiving amount must be greater than 0 after fees",
                    "value": {
                      "message": "Receiving amount must be greater than 0 after fees",
                      "code": "BAD REQUEST",
                      "statusCode": 400,
                      "context": {
                        "type": "Transaction"
                      }
                    }
                  },
                  "transactionOfframpSendingWalletRequired": {
                    "summary": "Transaction -> Offramp - Sending wallet is required",
                    "value": {
                      "message": "Sending wallet is required.",
                      "code": "BAD REQUEST",
                      "statusCode": 400,
                      "context": {
                        "type": "Transaction -> Offramp"
                      }
                    }
                  },
                  "transactionOnrampSendingBankAccountRequired": {
                    "summary": "Transaction -> Onramp - Sending bank account is required",
                    "value": {
                      "message": "Sending bank account is required.",
                      "code": "BAD REQUEST",
                      "statusCode": 400,
                      "context": {
                        "type": "Transaction -> Onramp"
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Invalid currency details"
                    },
                    "code": {
                      "type": "string",
                      "description": "Error code",
                      "example": "BAD REQUEST"
                    },
                    "statusCode": {
                      "type": "number",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "context": {
                      "type": "object",
                      "additionalProperties": {
                        "nullable": true
                      },
                      "description": "Additional context for the error"
                    },
                    "path": {
                      "type": "string",
                      "description": "Path where the error occurred",
                      "example": "/example/path"
                    }
                  },
                  "required": [
                    "message",
                    "code",
                    "statusCode",
                    "context",
                    "path"
                  ]
                },
                "examples": {
                  "transactionForbidden": {
                    "summary": "Transaction - Not Belonging to Organization",
                    "value": {
                      "message": "Transaction does not belong to this org",
                      "code": "FORBIDDEN",
                      "statusCode": 403,
                      "context": {
                        "type": "Transaction"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Invalid currency details"
                    },
                    "code": {
                      "type": "string",
                      "description": "Error code",
                      "example": "BAD REQUEST"
                    },
                    "statusCode": {
                      "type": "number",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "context": {
                      "type": "object",
                      "additionalProperties": {
                        "nullable": true
                      },
                      "description": "Additional context for the error"
                    },
                    "path": {
                      "type": "string",
                      "description": "Path where the error occurred",
                      "example": "/example/path"
                    }
                  },
                  "required": [
                    "message",
                    "code",
                    "statusCode",
                    "context",
                    "path"
                  ]
                },
                "examples": {
                  "transactionBankAccountNotFound": {
                    "summary": "Transaction - Bank Account ID not found",
                    "value": {
                      "message": "Bank Account ID not found.",
                      "code": "NOT FOUND",
                      "statusCode": 404,
                      "context": {
                        "type": "Transaction"
                      }
                    }
                  },
                  "transactionOfframpCustomerAccountNotFound": {
                    "summary": "Transaction -> Offramp - Customer account not found",
                    "value": {
                      "message": "Customer account not found",
                      "code": "NOT FOUND",
                      "statusCode": 404,
                      "context": {
                        "type": "Transaction -> Offramp"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Invalid currency details"
                    },
                    "code": {
                      "type": "string",
                      "description": "Error code",
                      "example": "BAD REQUEST"
                    },
                    "statusCode": {
                      "type": "number",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "context": {
                      "type": "object",
                      "additionalProperties": {
                        "nullable": true
                      },
                      "description": "Additional context for the error"
                    },
                    "path": {
                      "type": "string",
                      "description": "Path where the error occurred",
                      "example": "/example/path"
                    }
                  },
                  "required": [
                    "message",
                    "code",
                    "statusCode",
                    "context",
                    "path"
                  ]
                },
                "examples": {
                  "transactionUnexpectedState": {
                    "summary": "Transaction - Unexpected transaction state",
                    "value": {
                      "message": "Internal Error: Please contact Fern team",
                      "code": "INTERNAL ERROR",
                      "statusCode": 500,
                      "context": {
                        "type": "Transaction"
                      }
                    }
                  },
                  "transactionOnrampProviderError": {
                    "summary": "Transaction -> Onramp - Provider error",
                    "value": {
                      "message": "Internal Error: Please contact Fern team",
                      "code": "INTERNAL ERROR",
                      "statusCode": 500,
                      "context": {
                        "type": "Transaction -> Onramp"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Transactions"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Page token to fetch entries after",
              "example": "abc"
            },
            "required": false,
            "name": "pageToken",
            "in": "path"
          },
          {
            "schema": {
              "type": "number",
              "minimum": 0,
              "exclusiveMinimum": true,
              "maximum": 100,
              "description": "Number of entries to fetch",
              "example": 10
            },
            "required": false,
            "name": "pageSize",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "description": "Customer to list transaction for",
              "example": "072a8b7b-38c7-429a-a6cf-35dae7f2fb77"
            },
            "required": true,
            "name": "customerId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Transactions retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "transactions": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "transactionId": {
                            "type": "string",
                            "description": "Unique identifier of the transaction",
                            "example": "1d8beb26-b4d1-47ee-8e5d-0d3905f200c7"
                          },
                          "correlationId": {
                            "type": "string",
                            "description": "Optional: You can add your own correlationId to match the transaction to your own internal records.",
                            "example": "03b7030f-6da1-4e76-3352-3debd82112c8"
                          },
                          "status": {
                            "type": "string",
                            "enum": [
                              "AWAITING_TRANSFER",
                              "PROCESSING",
                              "COMPLETED",
                              "FAILED",
                              "CANCELLED"
                            ],
                            "description": "Current status of the transaction",
                            "title": "Transaction State",
                            "example": "PROCESSING"
                          },
                          "fees": {
                            "type": "object",
                            "properties": {
                              "fernFee": {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "fern",
                                      "developer"
                                    ],
                                    "description": "The type of fee",
                                    "title": "Fee Type"
                                  },
                                  "currency": {
                                    "type": "string",
                                    "description": "Currency the fee is denominated in",
                                    "example": "USD"
                                  },
                                  "amount": {
                                    "type": "number",
                                    "description": "Amount of this fee that was applied",
                                    "example": 5.45
                                  },
                                  "usdAmount": {
                                    "type": "number",
                                    "description": "Amount of this fee that was applied in USD",
                                    "example": 5.45
                                  }
                                },
                                "required": [
                                  "type",
                                  "currency",
                                  "amount",
                                  "usdAmount"
                                ],
                                "description": "Fee charged by Fern"
                              },
                              "developerFee": {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "fern",
                                      "developer"
                                    ],
                                    "description": "The type of fee",
                                    "title": "Fee Type"
                                  },
                                  "currency": {
                                    "type": "string",
                                    "description": "Currency the fee is denominated in",
                                    "example": "USD"
                                  },
                                  "amount": {
                                    "type": "number",
                                    "description": "Amount of this fee that was applied",
                                    "example": 5.45
                                  },
                                  "usdAmount": {
                                    "type": "number",
                                    "description": "Amount of this fee that was applied in USD",
                                    "example": 5.45
                                  }
                                },
                                "required": [
                                  "type",
                                  "currency",
                                  "amount",
                                  "usdAmount"
                                ],
                                "description": "Fee charged by application developer"
                              }
                            },
                            "required": [
                              "fernFee"
                            ],
                            "description": "Detailed breakdown of all fees associated with the transaction",
                            "title": "Transaction Fees"
                          },
                          "exchangeRate": {
                            "type": "number",
                            "description": "The rate at which the source currency is multiplied to determine the equivalent amount in the destination currency",
                            "example": 1.2
                          },
                          "transferInstructions": {
                            "oneOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "offramp"
                                    ],
                                    "example": "offramp"
                                  },
                                  "paymentMethod": {
                                    "type": "string",
                                    "enum": [
                                      "arbitrum",
                                      "base",
                                      "ethereum",
                                      "optimism",
                                      "polygon"
                                    ],
                                    "description": "The chain to deposit funds on",
                                    "title": "Crypto Payment Method",
                                    "example": "ethereum"
                                  },
                                  "transferWalletAddress": {
                                    "type": "string",
                                    "pattern": "^0x[a-fA-F0-9]{40}$",
                                    "description": "Details of the sending currency",
                                    "example": "0x123abc123abc123abc123abc123abc123abc123a"
                                  }
                                },
                                "required": [
                                  "type",
                                  "paymentMethod",
                                  "transferWalletAddress"
                                ],
                                "description": "Instructions for the customer to initiate the offramp",
                                "title": "Transfer Instructions"
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "onramp"
                                    ]
                                  },
                                  "paymentMethod": {
                                    "type": "string",
                                    "enum": [
                                      "ach",
                                      "ach_same_day",
                                      "wire"
                                    ],
                                    "description": "The fiat payment Method used for the transaction",
                                    "title": "Fiat Payment Method"
                                  },
                                  "transferMessage": {
                                    "type": "string",
                                    "description": "Message or memo that the customer must include with the deposit",
                                    "example": "Payment for order #12345"
                                  },
                                  "transferBankName": {
                                    "type": "string",
                                    "description": "Name of the bank for deposit",
                                    "example": "First National Bank"
                                  },
                                  "transferBankAddress": {
                                    "type": "string",
                                    "description": "Address of the bank",
                                    "example": "123 Bank St, Finance City"
                                  },
                                  "transferBankRoutingNumber": {
                                    "type": "string",
                                    "description": "Routing number of the bank",
                                    "example": "123456789"
                                  },
                                  "transferBankAccountNumber": {
                                    "type": "string",
                                    "description": "Bank account number for deposit",
                                    "example": "987654321"
                                  },
                                  "transferBankBeneficiaryName": {
                                    "type": "string",
                                    "description": "Beneficiary name associated with the bank account",
                                    "example": "John Doe"
                                  }
                                },
                                "required": [
                                  "type",
                                  "paymentMethod",
                                  "transferMessage",
                                  "transferBankName",
                                  "transferBankAddress",
                                  "transferBankRoutingNumber",
                                  "transferBankAccountNumber",
                                  "transferBankBeneficiaryName"
                                ],
                                "description": "Instructions for the customer to initiate the onramp",
                                "title": "Onramp Transfer Instructions"
                              }
                            ],
                            "description": "Transfer instructions for either onramp or offramp transactions",
                            "title": "Transfer Instructions"
                          },
                          "source": {
                            "type": "object",
                            "properties": {
                              "bankAccountId": {
                                "type": "string",
                                "description": "The bank account ID when sending from a bank account.",
                                "example": "072a8b7b-38c7-429a-a6cf-35dae7f2fb77"
                              },
                              "paymentMethod": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "enum": [
                                      "ach",
                                      "ach_same_day",
                                      "wire"
                                    ],
                                    "description": "The payment method for the source funds (fiat)",
                                    "title": "Fiat Payment Method",
                                    "example": "ach"
                                  },
                                  {
                                    "type": "string",
                                    "enum": [
                                      "arbitrum",
                                      "base",
                                      "ethereum",
                                      "optimism",
                                      "polygon"
                                    ],
                                    "description": "The payment method for the source funds (crypto)",
                                    "title": "Crypto Payment Method",
                                    "example": "ethereum"
                                  }
                                ],
                                "description": "The payment method for the source funds (crypto or fiat)"
                              },
                              "currency": {
                                "type": "string",
                                "description": "The currency to send (e.g., USD, ETH, USDC)",
                                "example": "USD"
                              }
                            },
                            "required": [
                              "paymentMethod",
                              "currency"
                            ]
                          },
                          "destination": {
                            "type": "object",
                            "properties": {
                              "bankAccountId": {
                                "type": "string",
                                "description": "The bank account ID when sending to a bank account.",
                                "example": "072a8b7b-38c7-429a-a6cf-35dae7f2fb77"
                              },
                              "walletAddress": {
                                "type": "string",
                                "maxLength": 42,
                                "description": "The wallet address when sending to a crypto wallet.",
                                "example": "0xbf50fb9c99233f95bce213044507e58485cf9eba"
                              },
                              "paymentMethod": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "enum": [
                                      "ach",
                                      "ach_same_day",
                                      "wire"
                                    ],
                                    "description": "The payment method for the source funds (fiat)",
                                    "title": "Fiat Payment Method",
                                    "example": "ach"
                                  },
                                  {
                                    "type": "string",
                                    "enum": [
                                      "arbitrum",
                                      "base",
                                      "ethereum",
                                      "optimism",
                                      "polygon"
                                    ],
                                    "description": "The payment method for the source funds (crypto)",
                                    "title": "Crypto Payment Method",
                                    "example": "ethereum"
                                  }
                                ],
                                "description": "The payment method for the source funds (crypto or fiat)"
                              },
                              "currency": {
                                "type": "string",
                                "description": "The currency to receive (e.g., USD, USDC)",
                                "example": "USDC"
                              },
                              "wireMessage": {
                                "type": "string",
                                "maxLength": 140,
                                "description": "Optional message for wire transfers, relayed to destination bank (max 140 characters)"
                              },
                              "achReference": {
                                "type": "string",
                                "maxLength": 80,
                                "description": "Optional reference for ACH transfers, relayed to destination bank (max 80 characters)"
                              }
                            },
                            "required": [
                              "paymentMethod",
                              "currency"
                            ]
                          },
                          "sendingAmount": {
                            "type": "number",
                            "minimum": 0,
                            "description": "The amount to convert and send, expressed in decimals and denominated in the source currency",
                            "example": 100
                          },
                          "receivingAmount": {
                            "type": "number",
                            "minimum": 0,
                            "exclusiveMinimum": true,
                            "description": "The amount that will be received after conversion and fees",
                            "example": 98.5
                          },
                          "minGuaranteedReceivingAmount": {
                            "type": "number",
                            "minimum": 0,
                            "exclusiveMinimum": true,
                            "description": "The minimum amount guaranteed to be received, accounting for potential price fluctuations",
                            "example": 98
                          },
                          "errorDetails": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "message": {
                                  "type": "string",
                                  "description": "Error message if the transaction has failed",
                                  "example": "Insufficient funds"
                                },
                                "code": {
                                  "type": "string",
                                  "description": "Error code if the transaction has failed",
                                  "example": "INSUFFICIENT_FUNDS"
                                },
                                "metadata": {
                                  "type": "object",
                                  "nullable": true,
                                  "additionalProperties": {
                                    "type": "string"
                                  },
                                  "description": "Additional error metadata",
                                  "example": {
                                    "errorType": "Funds Error"
                                  }
                                },
                                "timestamp": {
                                  "type": "string",
                                  "format": "date-time",
                                  "description": "Timestamp of the error",
                                  "example": "2021-08-10T14:48:00Z"
                                },
                                "action": {
                                  "type": "string",
                                  "nullable": true,
                                  "description": "Action to take to resolve the error",
                                  "example": "Add more funds"
                                }
                              },
                              "required": [
                                "message"
                              ]
                            },
                            "description": "Details of the error if the transaction has failed"
                          }
                        },
                        "required": [
                          "transactionId",
                          "status",
                          "fees",
                          "exchangeRate",
                          "transferInstructions",
                          "source",
                          "destination",
                          "sendingAmount",
                          "receivingAmount",
                          "minGuaranteedReceivingAmount",
                          "errorDetails"
                        ],
                        "description": "Response schema for a transaction creation request",
                        "title": "Create Transaction Response Schema"
                      },
                      "description": "Retrieved transactions"
                    },
                    "nextPageToken": {
                      "type": "string",
                      "description": "Page token to use to fetch next page",
                      "example": "xyz"
                    }
                  }
                },
                "examples": {
                  "example1": {
                    "summary": "Transactions retrieved successfully",
                    "value": [
                      {
                        "quoteId": "072a8b7b-3356-48b5-b2bb-6fca7b618c96",
                        "transactionId": "908c4092-3a5e-44c8-ac4e-ad47993f00e9",
                        "status": "AWAITING_TRANSFER",
                        "fees": {
                          "fernFee": {
                            "type": "fern",
                            "currency": "USDC",
                            "amount": 0.75,
                            "usdAmount": 0.75
                          },
                          "developerFee": {
                            "type": "developer",
                            "currency": "USDC",
                            "amount": 0,
                            "usdAmount": 0
                          }
                        },
                        "exchangeRate": 1,
                        "transferInstructions": {
                          "type": "onramp",
                          "paymentMethod": "wire",
                          "transferMessage": "test onramp",
                          "transferBankName": "Chase",
                          "transferBankAddress": "10 Downing Steet",
                          "transferBankRoutingNumber": "1234",
                          "transferBankAccountNumber": "10029000",
                          "transferBankBeneficiaryName": "Fern Money"
                        },
                        "source": {
                          "bankAccountId": "072a8b7b-38c7-429a-a6cf-35dae7f2fb77",
                          "paymentMethod": "wire",
                          "currency": "USD"
                        },
                        "destination": {
                          "walletAddress": "0xBF50FB9C99233f95bcE213044507e58485Cf9EBA",
                          "paymentMethod": "ethereum",
                          "currency": "USDC"
                        },
                        "sendingAmount": 100,
                        "receivingAmount": 79.5,
                        "minGuaranteedReceivingAmount": 79.5
                      },
                      {
                        "quoteId": "c88ebfc2-3356-48b5-b2bb-6fca7b618c96",
                        "transactionId": "1d8beb26-b4d1-47ee-8e5d-0d3905f200c7",
                        "status": "PROCESSING",
                        "fees": {
                          "fernFee": {
                            "type": "fern",
                            "currency": "USD",
                            "amount": 20.5,
                            "usdAmount": 20.5
                          },
                          "developerFee": {
                            "type": "developer",
                            "currency": "USD",
                            "amount": 0,
                            "usdAmount": 0
                          }
                        },
                        "exchangeRate": 1,
                        "transferInstructions": {
                          "type": "offramp",
                          "paymentMethod": "ethereum",
                          "transferWalletAddress": "0xBF50FB9C99233f95bcE213044507e58485Cf9EBA"
                        },
                        "source": {
                          "paymentMethod": "ethereum",
                          "currency": "USDC"
                        },
                        "destination": {
                          "bankAccountId": "072a8b7b-38c7-429a-a6cf-35dae7f2fb77",
                          "paymentMethod": "wire",
                          "currency": "USD"
                        },
                        "sendingAmount": 100,
                        "receivingAmount": 79.5,
                        "minGuaranteedReceivingAmount": 79.5
                      }
                    ]
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Invalid currency details"
                    },
                    "code": {
                      "type": "string",
                      "description": "Error code",
                      "example": "BAD REQUEST"
                    },
                    "statusCode": {
                      "type": "number",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "context": {
                      "type": "object",
                      "additionalProperties": {
                        "nullable": true
                      },
                      "description": "Additional context for the error"
                    },
                    "path": {
                      "type": "string",
                      "description": "Path where the error occurred",
                      "example": "/example/path"
                    }
                  },
                  "required": [
                    "message",
                    "code",
                    "statusCode",
                    "context",
                    "path"
                  ]
                },
                "examples": {
                  "accountNotLinkedToOrg": {
                    "summary": "Account not linked to org",
                    "value": {
                      "message": "Account not linked to org",
                      "code": "FORBIDDEN",
                      "statusCode": 403,
                      "context": {
                        "type": "Account"
                      },
                      "path": "/account"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v0/transactions/{transactionId}": {
      "get": {
        "tags": [
          "Transactions"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Unique identifier of the transaction",
              "example": "1d8beb26-b4d1-47ee-8e5d-0d3905f200c7"
            },
            "required": true,
            "name": "transactionId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Transaction retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "transactionId": {
                      "type": "string",
                      "description": "Unique identifier of the transaction",
                      "example": "1d8beb26-b4d1-47ee-8e5d-0d3905f200c7"
                    },
                    "correlationId": {
                      "type": "string",
                      "description": "Optional: You can add your own correlationId to match the transaction to your own internal records.",
                      "example": "03b7030f-6da1-4e76-3352-3debd82112c8"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "AWAITING_TRANSFER",
                        "PROCESSING",
                        "COMPLETED",
                        "FAILED",
                        "CANCELLED"
                      ],
                      "description": "Current status of the transaction",
                      "title": "Transaction State",
                      "example": "PROCESSING"
                    },
                    "fees": {
                      "type": "object",
                      "properties": {
                        "fernFee": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "fern",
                                "developer"
                              ],
                              "description": "The type of fee",
                              "title": "Fee Type"
                            },
                            "currency": {
                              "type": "string",
                              "description": "Currency the fee is denominated in",
                              "example": "USD"
                            },
                            "amount": {
                              "type": "number",
                              "description": "Amount of this fee that was applied",
                              "example": 5.45
                            },
                            "usdAmount": {
                              "type": "number",
                              "description": "Amount of this fee that was applied in USD",
                              "example": 5.45
                            }
                          },
                          "required": [
                            "type",
                            "currency",
                            "amount",
                            "usdAmount"
                          ],
                          "description": "Fee charged by Fern"
                        },
                        "developerFee": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "fern",
                                "developer"
                              ],
                              "description": "The type of fee",
                              "title": "Fee Type"
                            },
                            "currency": {
                              "type": "string",
                              "description": "Currency the fee is denominated in",
                              "example": "USD"
                            },
                            "amount": {
                              "type": "number",
                              "description": "Amount of this fee that was applied",
                              "example": 5.45
                            },
                            "usdAmount": {
                              "type": "number",
                              "description": "Amount of this fee that was applied in USD",
                              "example": 5.45
                            }
                          },
                          "required": [
                            "type",
                            "currency",
                            "amount",
                            "usdAmount"
                          ],
                          "description": "Fee charged by application developer"
                        }
                      },
                      "required": [
                        "fernFee"
                      ],
                      "description": "Detailed breakdown of all fees associated with the transaction",
                      "title": "Transaction Fees"
                    },
                    "exchangeRate": {
                      "type": "number",
                      "description": "The rate at which the source currency is multiplied to determine the equivalent amount in the destination currency",
                      "example": 1.2
                    },
                    "transferInstructions": {
                      "oneOf": [
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "offramp"
                              ],
                              "example": "offramp"
                            },
                            "paymentMethod": {
                              "type": "string",
                              "enum": [
                                "arbitrum",
                                "base",
                                "ethereum",
                                "optimism",
                                "polygon"
                              ],
                              "description": "The chain to deposit funds on",
                              "title": "Crypto Payment Method",
                              "example": "ethereum"
                            },
                            "transferWalletAddress": {
                              "type": "string",
                              "pattern": "^0x[a-fA-F0-9]{40}$",
                              "description": "Details of the sending currency",
                              "example": "0x123abc123abc123abc123abc123abc123abc123a"
                            }
                          },
                          "required": [
                            "type",
                            "paymentMethod",
                            "transferWalletAddress"
                          ],
                          "description": "Instructions for the customer to initiate the offramp",
                          "title": "Transfer Instructions"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "onramp"
                              ]
                            },
                            "paymentMethod": {
                              "type": "string",
                              "enum": [
                                "ach",
                                "ach_same_day",
                                "wire"
                              ],
                              "description": "The fiat payment Method used for the transaction",
                              "title": "Fiat Payment Method"
                            },
                            "transferMessage": {
                              "type": "string",
                              "description": "Message or memo that the customer must include with the deposit",
                              "example": "Payment for order #12345"
                            },
                            "transferBankName": {
                              "type": "string",
                              "description": "Name of the bank for deposit",
                              "example": "First National Bank"
                            },
                            "transferBankAddress": {
                              "type": "string",
                              "description": "Address of the bank",
                              "example": "123 Bank St, Finance City"
                            },
                            "transferBankRoutingNumber": {
                              "type": "string",
                              "description": "Routing number of the bank",
                              "example": "123456789"
                            },
                            "transferBankAccountNumber": {
                              "type": "string",
                              "description": "Bank account number for deposit",
                              "example": "987654321"
                            },
                            "transferBankBeneficiaryName": {
                              "type": "string",
                              "description": "Beneficiary name associated with the bank account",
                              "example": "John Doe"
                            }
                          },
                          "required": [
                            "type",
                            "paymentMethod",
                            "transferMessage",
                            "transferBankName",
                            "transferBankAddress",
                            "transferBankRoutingNumber",
                            "transferBankAccountNumber",
                            "transferBankBeneficiaryName"
                          ],
                          "description": "Instructions for the customer to initiate the onramp",
                          "title": "Onramp Transfer Instructions"
                        }
                      ],
                      "description": "Transfer instructions for either onramp or offramp transactions",
                      "title": "Transfer Instructions"
                    },
                    "source": {
                      "type": "object",
                      "properties": {
                        "bankAccountId": {
                          "type": "string",
                          "description": "The bank account ID when sending from a bank account.",
                          "example": "072a8b7b-38c7-429a-a6cf-35dae7f2fb77"
                        },
                        "paymentMethod": {
                          "anyOf": [
                            {
                              "type": "string",
                              "enum": [
                                "ach",
                                "ach_same_day",
                                "wire"
                              ],
                              "description": "The payment method for the source funds (fiat)",
                              "title": "Fiat Payment Method",
                              "example": "ach"
                            },
                            {
                              "type": "string",
                              "enum": [
                                "arbitrum",
                                "base",
                                "ethereum",
                                "optimism",
                                "polygon"
                              ],
                              "description": "The payment method for the source funds (crypto)",
                              "title": "Crypto Payment Method",
                              "example": "ethereum"
                            }
                          ],
                          "description": "The payment method for the source funds (crypto or fiat)"
                        },
                        "currency": {
                          "type": "string",
                          "description": "The currency to send (e.g., USD, ETH, USDC)",
                          "example": "USD"
                        }
                      },
                      "required": [
                        "paymentMethod",
                        "currency"
                      ]
                    },
                    "destination": {
                      "type": "object",
                      "properties": {
                        "bankAccountId": {
                          "type": "string",
                          "description": "The bank account ID when sending to a bank account.",
                          "example": "072a8b7b-38c7-429a-a6cf-35dae7f2fb77"
                        },
                        "walletAddress": {
                          "type": "string",
                          "maxLength": 42,
                          "description": "The wallet address when sending to a crypto wallet.",
                          "example": "0xbf50fb9c99233f95bce213044507e58485cf9eba"
                        },
                        "paymentMethod": {
                          "anyOf": [
                            {
                              "type": "string",
                              "enum": [
                                "ach",
                                "ach_same_day",
                                "wire"
                              ],
                              "description": "The payment method for the source funds (fiat)",
                              "title": "Fiat Payment Method",
                              "example": "ach"
                            },
                            {
                              "type": "string",
                              "enum": [
                                "arbitrum",
                                "base",
                                "ethereum",
                                "optimism",
                                "polygon"
                              ],
                              "description": "The payment method for the source funds (crypto)",
                              "title": "Crypto Payment Method",
                              "example": "ethereum"
                            }
                          ],
                          "description": "The payment method for the source funds (crypto or fiat)"
                        },
                        "currency": {
                          "type": "string",
                          "description": "The currency to receive (e.g., USD, USDC)",
                          "example": "USDC"
                        },
                        "wireMessage": {
                          "type": "string",
                          "maxLength": 140,
                          "description": "Optional message for wire transfers, relayed to destination bank (max 140 characters)"
                        },
                        "achReference": {
                          "type": "string",
                          "maxLength": 80,
                          "description": "Optional reference for ACH transfers, relayed to destination bank (max 80 characters)"
                        }
                      },
                      "required": [
                        "paymentMethod",
                        "currency"
                      ]
                    },
                    "sendingAmount": {
                      "type": "number",
                      "minimum": 0,
                      "description": "The amount to convert and send, expressed in decimals and denominated in the source currency",
                      "example": 100
                    },
                    "receivingAmount": {
                      "type": "number",
                      "minimum": 0,
                      "exclusiveMinimum": true,
                      "description": "The amount that will be received after conversion and fees",
                      "example": 98.5
                    },
                    "minGuaranteedReceivingAmount": {
                      "type": "number",
                      "minimum": 0,
                      "exclusiveMinimum": true,
                      "description": "The minimum amount guaranteed to be received, accounting for potential price fluctuations",
                      "example": 98
                    },
                    "errorDetails": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "description": "Error message if the transaction has failed",
                            "example": "Insufficient funds"
                          },
                          "code": {
                            "type": "string",
                            "description": "Error code if the transaction has failed",
                            "example": "INSUFFICIENT_FUNDS"
                          },
                          "metadata": {
                            "type": "object",
                            "nullable": true,
                            "additionalProperties": {
                              "type": "string"
                            },
                            "description": "Additional error metadata",
                            "example": {
                              "errorType": "Funds Error"
                            }
                          },
                          "timestamp": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Timestamp of the error",
                            "example": "2021-08-10T14:48:00Z"
                          },
                          "action": {
                            "type": "string",
                            "nullable": true,
                            "description": "Action to take to resolve the error",
                            "example": "Add more funds"
                          }
                        },
                        "required": [
                          "message"
                        ]
                      },
                      "description": "Details of the error if the transaction has failed"
                    }
                  },
                  "required": [
                    "transactionId",
                    "status",
                    "fees",
                    "exchangeRate",
                    "transferInstructions",
                    "source",
                    "destination",
                    "sendingAmount",
                    "receivingAmount",
                    "minGuaranteedReceivingAmount",
                    "errorDetails"
                  ],
                  "description": "Response schema for a transaction creation request",
                  "title": "Create Transaction Response Schema"
                },
                "examples": {
                  "example1": {
                    "summary": "Offramp transaction response",
                    "value": {
                      "quoteId": "c88ebfc2-3356-48b5-b2bb-6fca7b618c96",
                      "transactionId": "1d8beb26-b4d1-47ee-8e5d-0d3905f200c7",
                      "status": "PROCESSING",
                      "fees": {
                        "fernFee": {
                          "type": "fern",
                          "currency": "USD",
                          "amount": 20.5,
                          "usdAmount": 20.5
                        },
                        "developerFee": {
                          "type": "developer",
                          "currency": "USD",
                          "amount": 0,
                          "usdAmount": 0
                        }
                      },
                      "exchangeRate": 1,
                      "transferInstructions": {
                        "type": "offramp",
                        "paymentMethod": "ethereum",
                        "transferWalletAddress": "0xBF50FB9C99233f95bcE213044507e58485Cf9EBA"
                      },
                      "source": {
                        "paymentMethod": "ethereum",
                        "currency": "USDC"
                      },
                      "destination": {
                        "bankAccountId": "072a8b7b-38c7-429a-a6cf-35dae7f2fb77",
                        "paymentMethod": "wire",
                        "currency": "USD"
                      },
                      "sendingAmount": 100,
                      "receivingAmount": 79.5,
                      "minGuaranteedReceivingAmount": 79.5
                    }
                  },
                  "example2": {
                    "summary": "Onramp transaction response",
                    "value": {
                      "quoteId": "072a8b7b-3356-48b5-b2bb-6fca7b618c96",
                      "transactionId": "908c4092-3a5e-44c8-ac4e-ad47993f00e9",
                      "status": "AWAITING_TRANSFER",
                      "fees": {
                        "fernFee": {
                          "type": "fern",
                          "currency": "USDC",
                          "amount": 0.75,
                          "usdAmount": 0.75
                        },
                        "developerFee": {
                          "type": "developer",
                          "currency": "USDC",
                          "amount": 0,
                          "usdAmount": 0
                        }
                      },
                      "exchangeRate": 1,
                      "transferInstructions": {
                        "type": "onramp",
                        "paymentMethod": "wire",
                        "transferMessage": "test onramp",
                        "transferBankName": "Chase",
                        "transferBankAddress": "10 Downing Steet",
                        "transferBankRoutingNumber": "1234",
                        "transferBankAccountNumber": "10029000",
                        "transferBankBeneficiaryName": "Fern Money"
                      },
                      "source": {
                        "bankAccountId": "072a8b7b-38c7-429a-a6cf-35dae7f2fb77",
                        "paymentMethod": "wire",
                        "currency": "USD"
                      },
                      "destination": {
                        "walletAddress": "0xBF50FB9C99233f95bcE213044507e58485Cf9EBA",
                        "paymentMethod": "ethereum",
                        "currency": "USDC"
                      },
                      "sendingAmount": 100,
                      "receivingAmount": 79.5,
                      "minGuaranteedReceivingAmount": 79.5
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Invalid currency details"
                    },
                    "code": {
                      "type": "string",
                      "description": "Error code",
                      "example": "BAD REQUEST"
                    },
                    "statusCode": {
                      "type": "number",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "context": {
                      "type": "object",
                      "additionalProperties": {
                        "nullable": true
                      },
                      "description": "Additional context for the error"
                    },
                    "path": {
                      "type": "string",
                      "description": "Path where the error occurred",
                      "example": "/example/path"
                    }
                  },
                  "required": [
                    "message",
                    "code",
                    "statusCode",
                    "context",
                    "path"
                  ]
                },
                "examples": {
                  "transactionNotFound": {
                    "summary": "Transaction not found",
                    "value": {
                      "message": "Transaction not found",
                      "code": "BAD REQUEST",
                      "statusCode": 400,
                      "context": {
                        "type": "Transaction"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Invalid currency details"
                    },
                    "code": {
                      "type": "string",
                      "description": "Error code",
                      "example": "BAD REQUEST"
                    },
                    "statusCode": {
                      "type": "number",
                      "description": "HTTP status code",
                      "example": 400
                    },
                    "context": {
                      "type": "object",
                      "additionalProperties": {
                        "nullable": true
                      },
                      "description": "Additional context for the error"
                    },
                    "path": {
                      "type": "string",
                      "description": "Path where the error occurred",
                      "example": "/example/path"
                    }
                  },
                  "required": [
                    "message",
                    "code",
                    "statusCode",
                    "context",
                    "path"
                  ]
                },
                "examples": {
                  "transactionBothOnrampOfframp": {
                    "summary": "Transaction cannot be both onramp and offramp",
                    "value": {
                      "message": "Transaction cannot be both onramp and offramp",
                      "code": "INTERNAL ERROR",
                      "statusCode": 500,
                      "context": {
                        "type": "Transaction"
                      }
                    }
                  },
                  "customerWalletNotFound": {
                    "summary": "Customer wallet address not found",
                    "value": {
                      "message": "Customer wallet address not found",
                      "code": "INTERNAL ERROR",
                      "statusCode": 500,
                      "context": {
                        "type": "Transaction"
                      }
                    }
                  },
                  "unexpectedTransactionState": {
                    "summary": "Unexpected transaction state",
                    "value": {
                      "message": "Internal Error: Please contact Fern team",
                      "code": "INTERNAL ERROR",
                      "statusCode": 500,
                      "context": {
                        "type": "Transaction"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v0/transactions/cancel": {
      "post": {
        "tags": [
          "Transactions"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "transactionId": {
                    "type": "string",
                    "description": "Unique identifier of the transaction",
                    "example": "1d8beb26-b4d1-47ee-8e5d-0d3905f200c7"
                  }
                },
                "required": [
                  "transactionId"
                ],
                "description": "Schema for retrieving transaction details",
                "title": "Get Transaction Schema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Transaction retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Message for the transaction",
                      "example": "Transaction updated successfully"
                    }
                  },
                  "required": [
                    "message"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Transaction not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Message for the transaction",
                      "example": "Transaction not found"
                    },
                    "code": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "number"
                    },
                    "context": {
                      "type": "string"
                    },
                    "path": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message",
                    "code",
                    "statusCode"
                  ]
                },
                "example": {
                  "message": "Invalid currency details",
                  "code": "BAD REQUEST",
                  "statusCode": 400,
                  "path": "/example/path"
                }
              }
            }
          }
        }
      }
    }
  }
}
